name: Multi-Stage CI/CD Pipeline

on:
  push:
    branches:
      - main
      - '**'    # include all branches, weâ€™ll handle filtering via conditions
    paths:
      - 'app/**'
      - 'Dockerfile'
      - '.github/workflows/build-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  DOCKERHUB_USERNAME: appukuttan
  IMAGE_NAME: mastersong
  REGISTRY: docker.io

jobs:
  # ============================================
  # Build and Push Docker Image
  # ============================================
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
      branch_name: ${{ steps.vars.outputs.branch_name }}
      short_sha: ${{ steps.vars.outputs.short_sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.MUSICAPP_GITHUB_TOKEN }}

      - name: Set build variables
        id: vars
        run: |
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set image tag
        id: set_tag
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          CLEAN_BRANCH=$(echo "$BRANCH" | tr '/' '-')
          # Use run_number for incremental versioning
          TAG="${CLEAN_BRANCH}-${GITHUB_RUN_NUMBER}"
          echo "Image tag: $TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.image_tag }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.branch_name }}-latest

  # ============================================
  # Deploy to DEV
  # ============================================
  deploy-dev:
    name: Deploy to DEV
    runs-on: ubuntu-latest
    needs: build
    if: |
      startsWith(github.ref, 'refs/heads/') && (
        github.ref != 'refs/heads/main' ||
        github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev' ||
        github.ref == 'refs/heads/main'
      )
    environment:
      name: dev
      url: https://dev.yourdomain.com
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Update DEV manifest
        run: |
          NEW_TAG="${{ needs.build.outputs.image_tag }}"
          echo "Updating dev manifest with tag $NEW_TAG"

          if [ -f "k8s/overlays/dev/kustomization.yaml" ]; then
            sed -i "s|newTag: .*|newTag: ${NEW_TAG}|g" k8s/overlays/dev/kustomization.yaml
          fi

      - name: Commit & push changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull origin ${GITHUB_REF#refs/heads/}
          git add k8s/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸš€ [DEV] Update deployment to ${{ needs.build.outputs.image_tag }}"
            git push origin HEAD:${{ github.ref_name }}
          fi

  # ============================================
  # Deploy to QA (only main branch + approval)
  # ============================================
  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: |
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'qa')
    environment:
      name: qa
      url: https://qa.yourdomain.com
      # ðŸ”¸ Configure "qa" environment in GitHub â†’ Settings â†’ Environments â†’ qa â†’ Add required reviewers for approval
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Update QA manifest
        run: |
          NEW_TAG="${{ needs.build.outputs.image_tag }}"
          echo "Updating QA manifest with tag $NEW_TAG"

          if [ -f "k8s/overlays/qa/kustomization.yaml" ]; then
            sed -i "s|newTag: .*|newTag: ${NEW_TAG}|g" k8s/overlays/qa/kustomization.yaml
          fi

      - name: Commit & push changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull origin ${GITHUB_REF#refs/heads/}
          git add k8s/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸš€ [QA] Update deployment to ${{ needs.build.outputs.image_tag }}"
            git push origin HEAD:${{ github.ref_name }}
          fi

  # ============================================
  # Notify Stage
  # ============================================
  notify:
    name: Notify Summary
    runs-on: ubuntu-latest
    needs: [build, deploy-dev, deploy-qa]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## âœ… Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`${{ needs.build.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: \`${{ needs.build.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- DockerHub: https://hub.docker.com/r/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY