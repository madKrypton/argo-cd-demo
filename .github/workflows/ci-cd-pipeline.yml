name: Multi-Stage CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'app/**'
      - 'Dockerfile'
      - '.github/workflows/ci-cd-pipeline.yml'
  pull_request:
    branches:
      - dev
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  DOCKERHUB_USERNAME: appukuttan
  IMAGE_NAME: mastersong
  REGISTRY: docker.io

jobs:
  # ============================================
  # Build and Test Stage
  # ============================================
  build-and-test:
    name: Build, Test & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.increment_tag.outputs.new_tag }}
      short_sha: ${{ steps.vars.outputs.short_sha }}
      branch_name: ${{ steps.vars.outputs.branch_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.MUSICAPP_GITHUB_TOKEN }}

      - name: Set build variables
        id: vars
        run: |
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get latest Git tag and increment version
        id: increment_tag
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag matching v* pattern
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No tags found, start with v10
            NEW_TAG="v10"
          else
            # Extract version number and increment
            VERSION=${LATEST_TAG#v}
            NEW_VERSION=$((VERSION + 1))
            NEW_TAG="v${NEW_VERSION}"
          fi
          
          echo "Latest tag: $LATEST_TAG"
          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.increment_tag.outputs.new_tag }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.branch_name }}-${{ steps.vars.outputs.short_sha }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.branch_name }}-latest
          cache-from: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Create and push Git tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a ${{ steps.increment_tag.outputs.new_tag }} -m "Release ${{ steps.increment_tag.outputs.new_tag }}"
          git push origin ${{ steps.increment_tag.outputs.new_tag }}

  # ============================================
  # Deploy to DEV Environment
  # ============================================
  deploy-dev:
    name: Deploy to DEV
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/dev' || github.event.inputs.environment == 'dev'
    environment:
      name: dev
      url: https://dev.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MUSICAPP_GITHUB_TOKEN }}

      - name: Update DEV deployment manifest
        run: |
          NEW_TAG="${{ needs.build-and-test.outputs.new_tag }}"
          
          # Update the image tag in dev overlay
          if [ -f "k8s/overlays/dev/deployment.yaml" ]; then
            sed -i "s|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${NEW_TAG}|g" k8s/overlays/dev/deployment.yaml
          else
            # Update base deployment if overlay doesn't exist
            sed -i "s|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${NEW_TAG}|g" k8s/deployment.yaml
          fi
          
          echo "âœ… Updated DEV deployment with image tag: ${NEW_TAG}"

      - name: Commit and push DEV changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add k8s/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸš€ [DEV] Update deployment to ${{ needs.build-and-test.outputs.new_tag }}"
            git push origin HEAD:${{ github.ref_name }}
            echo "âœ… DEV manifest updated successfully!"
          fi

      - name: DEV Deployment Summary
        run: |
          echo "## ðŸŸ¢ DEV Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** DEV" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image:** \`${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.new_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${{ needs.build-and-test.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ needs.build-and-test.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ArgoCD will automatically sync to DEV! ðŸ”„" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Deploy to QA Environment
  # ============================================
  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'qa'
    environment:
      name: qa
      url: https://qa.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MUSICAPP_GITHUB_TOKEN }}

      - name: Update QA deployment manifest
        run: |
          NEW_TAG="${{ needs.build-and-test.outputs.new_tag }}"
          
          # Update the image tag in qa overlay
          if [ -f "k8s/overlays/qa/deployment.yaml" ]; then
            sed -i "s|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${NEW_TAG}|g" k8s/overlays/qa/deployment.yaml
          else
            # Update base deployment if overlay doesn't exist
            sed -i "s|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${NEW_TAG}|g" k8s/deployment.yaml
          fi
          
          echo "âœ… Updated QA deployment with image tag: ${NEW_TAG}"

      - name: Commit and push QA changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add k8s/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸš€ [QA] Update deployment to ${{ needs.build-and-test.outputs.new_tag }}"
            git push origin HEAD:${{ github.ref_name }}
            echo "âœ… QA manifest updated successfully!"
          fi

      - name: QA Deployment Summary
        run: |
          echo "## ðŸŸ¡ QA Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** QA" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image:** \`${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.new_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${{ needs.build-and-test.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Tag:** \`${{ needs.build-and-test.outputs.new_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ArgoCD will automatically sync to QA! ðŸ”„" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Notification Stage (Optional)
  # ============================================
  notify:
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-dev, deploy-qa]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          echo "## ðŸ“¢ Deployment Pipeline Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status:** ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **DEV Deploy:** ${{ needs.deploy-dev.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **QA Deploy:** ${{ needs.deploy-qa.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**DockerHub:** https://hub.docker.com/r/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
